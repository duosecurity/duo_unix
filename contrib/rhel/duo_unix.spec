# Change this to match the version of duo_unix being built.
%global duo_unix_version 1.10.2

# Nothing below this point needs to be edited, but mind the next section.

#
# Currently, the distribution tar files require that the GNU autoconf tools are
# installed in order to build, because they don't include the configure and
# *.in files.  Instead, the RPM prep step must run autoreconf.
#
# The is problematic, because RHEL5 and RHEL6 don't include a new enough
# version of autoconf to support running autoreconf.  To work around this, you
# will need to generate a patch file that contains the files that would be
# generated by successfully running autoreconf.
#
# To do this, perform the following procedure on a RHEL7 or Fedora host,
# assuming you have created the standard RPM build structure, and have
# downloaded the distribution tar file:
#
#     $ cd RPM/BUILD
#     $ tar xvpfz ../SOURCES/duo_unix-1.10.2.tar.gz
#     $ mv duo_unix-duo_unix-1.10.2 duo_unix-duo_unix-1.10.2.NEW
#     $ tar xvpfz ../SOURCES/duo_unix-1.10.2.tar.gz
#     $ pushd duo_unix-duo_unix-1.10.2.NEW
#     $ autoreconf -vfi -I autotools
#     $ ./configure --prefix=/usr
#     $ make distclean
#     $ rm -rf autom4te.cache
#     $ popd
#     $ diff -r -U 3 -N duo_unix-duo_unix-1.10.2 duo_unix-duo_unix-1.10.2.NEW >../SOURCES/duo_unix-1.10.2-include-autotools-files.patch
#
# On RHEL5 and RHEL6 systems, this spec file will use the autotools patch file
# you generate in order to build.  On all other systems, it will just run
# autoreconf.
#
# Note that as per the Fedora packaging guidelines, the resulting SRPM package
# unconditionally includes all patches, even ones that are conditionally
# applied.  So even if you are building exclusively on RHEL7, you will still
# need to perform the above procedure to generate the patch file, because the
# SRPM unconditionally includes it.
#

# RHEL5 doesn't have the rhel macro, so set it manually on RHEL5 systems.
%if 0%(grep -q Tikanga /etc/redhat-release 2>/dev/null && echo 1 || echo 0) > 0
%global rhel 5
%endif

# RHEL before RHEL7 used /lib[64] instead of /usr/lib[64].
%if 0%{?rhel} > 0 && 0%{?rhel} < 7
%global pam_security_dir /%{_lib}/security
%else
%global pam_security_dir %{_libdir}/security
%endif

Name: duo_unix
Version: %{duo_unix_version}
Release: 1%{?dist}
Summary: Duo two-factor authentication for Unix systems
%if 0%{?rhel} > 0 && 0%{?rhel} < 7
Group: Applications/System
%endif

License: GPLv2
URL: https://www.duo.com/
Source0: https://github.com/duosecurity/duo_unix/archive/duo_unix-%{version}.tar.gz
Patch0: duo_unix-1.10.2-include-autotools-files.patch
%if 0%{?rhel} > 0 && 0%{?rhel} < 6
Buildroot: %(mktemp -ud %{_tmppath}/%{name}-%{version}-%{release}-XXXXXX)
%endif

%if ! (0%{?rhel} > 0 && 0%{?rhel} < 7)
BuildRequires: autoconf
BuildRequires: automake
BuildRequires: libtool
%endif
BuildRequires: openssl-devel
BuildRequires: pam-devel
BuildRequires: selinux-policy-devel

Requires(post): selinux-policy
Requires(preun): selinux-policy


%description
duo_unix implements Duo two-factor authentication for Unix systems.


%package devel
Summary: Development files needed to compile Duo programs
%if 0%{?rhel} > 0 && 0%{?rhel} < 7
Group: Applications/System
%endif


%description devel
duo_unix implements Duo two-factor authentication for Unix systems.

The duo_unix-devel package contains the header files and libraries needed for
compiling Duo programs. If you want to develop Duo-aware programs, you need to
install this package.


%prep
%setup -q -n %{name}-%{name}-%{version}
%if 0%{?rhel} > 0 && 0%{?rhel} < 7
%patch0 -p1 -b .include-autotools-files
%{__chmod} 0755 \
  configure \
  autotools/compile \
  autotools/config.guess \
  autotools/config.rpath \
  autotools/config.sub \
  autotools/depcomp \
  autotools/install-sh \
  autotools/missing
%else
autoreconf -vfi -I autotools
%endif


%build

%{configure} \
  --sysconfdir=%{_sysconfdir}/duo \
  --with-pam=%{pam_security_dir}
%{__make} %{?_smp_mflags}

# We need the PAM module.
%{__make} -C pam_duo semodule


%install

rm -rf $RPM_BUILD_ROOT
%if 0%{?rhel} > 0 && 0%{?rhel} < 6
%{__make} DESTDIR=${RPM_BUILD_ROOT} install
%else
%{make_install}
%endif

# The semodule-install target attempts to activate the installed module, which
# we don't want.  So we need to install it ourselves.
%{__install} -d -m 0755 ${RPM_BUILD_ROOT}%{_datadir}/selinux/packages
%{__install} -m 0644 pam_duo/authlogin_duo.pp ${RPM_BUILD_ROOT}%{_datadir}/selinux/packages/authlogin_duo.pp

# The duo *.h files need to live in a separate subdirectory, because their
# names are waaaaay too generic not to clash with other packages.
%{__install} -d -m 0755 ${RPM_BUILD_ROOT}%{_includedir}/duo
%{__mv} ${RPM_BUILD_ROOT}%{_includedir}/*.h ${RPM_BUILD_ROOT}%{_includedir}/duo/

# The make install target installs files in /usr/share/doc, which we don't
# want, because we use the rpm "doc" macro to do that.
%{__rm} -r ${RPM_BUILD_ROOT}%{_defaultdocdir}


%if ! (0%{?rhel} > 0 && 0%{?rhel} < 7)
%clean
%{__rm} -rf ${RPM_BUILD_ROOT}
%endif


%post
%if 0%{?rhel} > 0 && 0%{?rhel} < 7
. /etc/selinux/config 
_policytype= 
if [ -z "${_policytype}" ]; then 
  _policytype="targeted" 
fi 
/usr/sbin/semodule -n -s ${_policytype} -X 200 -i %{_datadir}/selinux/packages/authlogin_duo.pp 
if /usr/sbin/selinuxenabled && [ "${SELINUXTYPE}" = "${_policytype}" ]; then 
  /usr/sbin/load_policy 
fi
%else
%selinux_modules_install %{_datadir}/selinux/packages/authlogin_duo.pp
%endif


%preun
%if 0%{?rhel} > 0 && 0%{?rhel} < 7
. /etc/selinux/config 
_policytype= 
if [ -z "${_policytype}" ]; then 
  _policytype="targeted" 
fi 
if [ $1 -eq 0 ]; then 
  /usr/sbin/semodule -n -X 200 -r authlogin_duo &> /dev/null || : 
  if /usr/sbin/selinuxenabled && [ "${SELINUXTYPE}" = "${_policytype}" ]; then 
    /usr/sbin/load_policy 
  fi 
fi 
%else
%selinux_modules_uninstall authlogin_duo
%endif


%files
%defattr(-,root,root,-)
%doc AUTHORS CHANGES LICENSE README
%dir %attr(0700,root,root) %{_sysconfdir}/duo
%config(noreplace) %{_sysconfdir}/duo/login_duo.conf
%config(noreplace) %{_sysconfdir}/duo/pam_duo.conf
%{pam_security_dir}/pam_duo.so
%attr(4755,root,root) %{_sbindir}/login_duo
%{_mandir}/man8/login_duo.8*
%{_mandir}/man8/pam_duo.8*
%{_datadir}/selinux/packages/authlogin_duo.pp


%files devel
%defattr(-,root,root,-)
%doc AUTHORS CHANGES LICENSE README
%{_includedir}/duo/duo.h
%{_includedir}/duo/shell.h
%{_includedir}/duo/util.h
%{_mandir}/man3/duo.3*
%{_libdir}/pkgconfig/libduo.pc
%{pam_security_dir}/pam_duo.la


%changelog
* Thu Jan 25 2018 James Ralston <ralston@pobox.com> - 1.10.2-1
- create spec file
